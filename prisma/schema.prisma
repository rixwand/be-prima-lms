generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserStatus {
  NOT_VERIFIED
  ACTIVE
  DISABLED
}

model RefreshSession {
  jti           String @id
  userId        Int
  expiresAt     DateTime

  revokedAt     DateTime?
  replacedByJti String? @unique @map("replaced_by_jti")

  createdAt     DateTime @default(now())
  updatedAt     DateTime  @updatedAt

  user          User  @relation(fields: [userId], references: [id])
  replacedBy    RefreshSession? @relation("SessionChain", fields: [replacedByJti], references: [jti])
  replacedFrom  RefreshSession[] @relation("SessionChain")

  @@index([userId, revokedAt, expiresAt])
  @@index([expiresAt])
  @@map("refresh_session")
}

model User {
  id            Int @id @default(autoincrement())
  fullName      String @map("full_name")
  email         String @unique
  username      String
  profilePict   String @map("profile_picture") @default("user.jpg")
  passwordHash  String @map("password_hash")
  roleId        Int
  status        UserStatus @default(NOT_VERIFIED)

  roles         Role @relation(fields: [roleId], references: [id])
  session       RefreshSession[]

  @@map("users")
}

model Role {
  id            Int @id @default(autoincrement())
  name          String @unique
  
  user          User[]
  perms    RolePermission[]

  @@map("roles")
}


model Permission {
  id            Int @id @default(autoincrement())
  action        String
  resource      String
  scope         String

  roles         RolePermission[]

  @@unique([scope, action, resource])      
  @@map("permissions")
}

model RolePermission {
  roleId        Int
  permissionId  Int

  role          Role       @relation(fields: [roleId], references: [id])
  permission    Permission @relation(fields: [permissionId], references: [id])

  @@id([roleId, permissionId])
  @@map("role_permissions")
}