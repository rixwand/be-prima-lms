generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserStatus {
  NOT_VERIFIED
  ACTIVE
  DISABLED
}

enum CourseStatus {
  DRAFT
  PUBLISHED
}

enum BlockType {
  RICH_TEXT
  VIDEO
  FILE
  EMBED
}

model RefreshSession {
  jti           String @id
  userId        Int
  expiresAt     DateTime

  revokedAt     DateTime?
  replacedByJti String? @unique @map("replaced_by_jti")

  createdAt     DateTime @default(now())
  updatedAt     DateTime  @updatedAt

  user          User  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  replacedBy    RefreshSession? @relation("SessionChain", fields: [replacedByJti], references: [jti])
  replacedFrom  RefreshSession[] @relation("SessionChain")

  @@index([userId, revokedAt, expiresAt])
  @@index([expiresAt])
  @@map("refresh_session")
}

model ActivationToken {
  id          String @id @default(cuid())
  userId      Int
  selector    String @unique @db.VarChar(64)
  tokenHash   String @map("token_hash") @db.VarChar(64)
  expiresAt   DateTime

  createdAt   DateTime @default(now())
  usedAt      DateTime?

  user        User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId, expiresAt])
  @@index([userId, usedAt])
  @@map("activation_tokens")
}

model User {
  id            Int @id @default(autoincrement())
  fullName      String @map("full_name")
  email         String @unique
  username      String
  profilePict   String @map("profile_picture") @default("user.jpg")
  passwordHash  String @map("password_hash")
  roleId        Int
  status        UserStatus @default(NOT_VERIFIED)
  createdAt     DateTime @default(now())

  roles         Role @relation(fields: [roleId], references: [id])
  session       RefreshSession[]
  activationToken ActivationToken[]
  courseOwned Course[] @relation("CourseOwner")

  @@map("users")
}

model Role {
  id            Int @id @default(autoincrement())
  name          String @unique
  
  user          User[]
  perms    RolePermission[]

  @@map("roles")
}


model Permission {
  id            Int @id @default(autoincrement())
  action        String
  resource      String
  scope         String

  roles         RolePermission[]

  @@unique([scope, action, resource])      
  @@map("permissions")
}

model RolePermission {
  roleId        Int
  permissionId  Int

  role          Role       @relation(fields: [roleId], references: [id])
  permission    Permission @relation(fields: [permissionId], references: [id])

  @@id([roleId, permissionId])
  @@map("role_permissions")
}

model Course {
  id            Int @id @default(autoincrement())
  title         String 
  slug          String @unique
  status        CourseStatus @default(DRAFT)
  ownerId       Int
  coverImage    String @map("cover_image")
  previewVideo  String? @map("preview_video")
  shortDescription String @db.Text @map("short_description")
  descriptionJson  Json? @map("description_json")
  priceAmount   Int @default(0)
  // TODO: REMOVE price currency in next migration
  priceCurrency String @default("IDR")
  isFree        Boolean @default(false)
  createdAt     DateTime @default(now())

  owner         User  @relation("CourseOwner", fields: [ownerId], references: [id])
  sections      CourseSection[]
  tags          CourseTag[]   @relation("CourseTags")
  @@map("courses")
}


model Tag {
  id        Int         @id @default(autoincrement())
  name      String      @unique
  slug      String      @unique
  courses   CourseTag[] @relation("CourseTags")

  @@map("tags")
}

model CourseTag {
  courseId Int
  tagId    Int

  course   Course @relation("CourseTags", fields: [courseId], references: [id], onDelete: Cascade)
  tag      Tag    @relation("CourseTags", fields: [tagId], references: [id], onDelete: Cascade)

  @@id([courseId, tagId])
  @@map("course_tags")
}

model CourseSection {
  id            Int @id @default(autoincrement())
  courseId      Int
  title         String
  position      Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  course        Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons Lesson[]
  @@unique([courseId, position])
  @@map("course_sections")
}

model Lesson {
  id          Int @id @default(autoincrement())
  sectionId   Int
  slug        String
  title       String
  summary     String?
  position    Int
  durationSec Int?
  isPreview   Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  section     CourseSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  blocks      LessonBlock[]
  
  @@unique([sectionId, position])
  @@unique([sectionId, slug])

  @@map("lessons")
}

model LessonBlock {
  id          Int @id @default(autoincrement())
  lessonId    Int 
  position    Int
  type        BlockType
  textJson    Json?  @map("text_json")
  url         String?
  meta        Json?
  createdAt   DateTime @default(now())

  lesson      Lesson @relation(fields: [lessonId],references: [id], onDelete: Cascade)

  @@unique([lessonId, position])
  @@map("lesson_blocks")
}